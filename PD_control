import numpy as np
import matplotlib.pyplot as plt

# Parameters
L = 20.0
N = 200
dx = L / N
dt = 0.01
T = 15.0  # Extended total simulation time
k1 = 1.0
k2 = 0.5
epsilon = 0.1
v = 0.5

# Discretization
x = np.linspace(-L/2, L/2, N)
u = np.zeros((N, int(T / dt) + 1))
u_s = 4 * np.arctan(np.exp((x - v * 0) / np.sqrt(1 - v**2)))

# Initial conditions
u[:, 0] = u_s + 0.1 * np.sin(2 * np.pi * x / L)
u[:, 1] = u[:, 0] + dt * (-np.sin(u[:, 0]) + epsilon * 0.1 * np.sin(2 * np.pi * x / L))

# Define perturbation function
def P(u, x, t):
    return 0.1 * np.sin(2 * np.pi * x / L) * np.cos(0.5 * t)

# Time integration
for n in range(1, int(T / dt)):
    phi = u[:, n] - 4 * np.arctan(np.exp((x - v * n * dt) / np.sqrt(1 - v**2)))

    C = -k1 * phi - k2 * (phi - (u[:, n] - u[:, n-1])) / dt

    # Calculate spatial derivative with correct boundary handling
    u_xx = np.zeros(N)
    u_xx[1:-1] = (u[2:, n] - 2 * u[1:-1, n] + u[:-2, n]) / dx**2
    # Boundary conditions: Dirichlet
    u[0, n+1] = 0
    u[-1, n+1] = 0

    u[:, n+1] = 2 * u[:, n] - u[:, n-1] + dt**2 * (
        u_xx - np.sin(u[:, n]) + epsilon * P(u[:, n], x, n * dt) + C
    )

# Define the times to plot
times_to_plot = [
    [0],                       # Plot A: Initial solution only
    [0, 100, 200],             # Plot B: Add two more solutions
    [0, 100, 200, 300, 400, 500, 600, 700, 800],  # Plot C: Add even more solutions
    [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]  # Plot D: Extensive time steps
]

# Generate the 2x2 grid of subplots
fig, axes = plt.subplots(2, 2, figsize=(12, 10))  # Create 2x2 grid
labels = ['Proportional control (A)', 'Proportional control (B)', 'Proportional control (C)', 'Proportional control (D)']  # Labels for the subplots

for i, times in enumerate(times_to_plot):
    ax = axes[i // 2, i % 2]  # Access subplot using grid indexing
    for t in times:
        if t < len(u[0]):  # Ensure index is within bounds
            ax.plot(x, u[:, t], label=f"t={t*dt:.2f}")
    ax.set_title(f" {labels[i]}", fontsize=16)
    ax.set_xlabel("x", fontsize=18)
    ax.set_ylabel("u(x, t)", fontsize=18)
    ax.legend(fontsize=10)
    plt.xticks(fontsize=16)  # Increase x-axis tick size
    plt.yticks(fontsize=12)  # Increase y-axis tick size
    #ax.grid(True)

# Adjust layout and save the figure
plt.tight_layout()
plt.savefig(r'C:\Users\Ohemeng\Desktop\NewFolder-2\plots_2x2.pdf')
plt.show()
