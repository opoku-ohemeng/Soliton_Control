import numpy as np
import matplotlib.pyplot as plt

# Parameters
L = 20.0
N = 200
dx = L / N
dt = 0.01
T = 10.0
epsilon = 0.1
v = 0.5
q = np.ones(N)  # Weighting for state error
r = 0.001       # Weighting for control effort (tuned)
alpha = 0.0001  # Learning rate
iterations = 50

# Discretization
x = np.linspace(-L/2, L/2, N)
time_steps = int(T / dt)
u = np.zeros((N, time_steps + 1))
u_d = np.zeros((N, time_steps + 1))
C = np.zeros((N, time_steps))

# Initial conditions
u_s = 4 * np.arctan(np.exp(x / np.sqrt(1 - v**2)))
u[:, 0] = u_s + 0.1 * np.sin(2 * np.pi * x / L)
u[:, 1] = u[:, 0] + dt * (-np.sin(u[:, 0]) + epsilon * 0.1 * np.sin(2 * np.pi * x / L) + C[:, 0])

# Desired solution (unperturbed kink)
for n in range(time_steps + 1):
    u_d[:, n] = 4 * np.arctan(np.exp((x - v * n * dt) / np.sqrt(1 - v**2)))

# Perturbation function
def P(u, x, t):
    return 0.1 * np.sin(2 * np.pi * x / L) * np.cos(0.5 * t)

# Optimization loop
for k in range(iterations):
    # Reset u for each iteration
    u = np.zeros((N, time_steps + 1))
    u[:, 0] = u_s + 0.1 * np.sin(2 * np.pi * x / L)
    u[:, 1] = u[:, 0] + dt * (-np.sin(u[:, 0]) + epsilon * P(u[:, 0], x, 0) + C[:, 0])

    # Solve the state equation (forward in time)
    for n in range(1, time_steps):
        u_xx = np.zeros(N)
        u_xx[1:-1] = (u[2:, n] - 2 * u[1:-1, n] + u[:-2, n]) / dx**2
        u[0, n+1] = 0
        u[-1, n+1] = 0
        u[:, n+1] = 2 * u[:, n] - u[:, n-1] + dt**2 * (
            u_xx - np.sin(u[:, n]) + epsilon * P(u[:, n], x, n * dt) + C[:, n])

    # Solve the adjoint equation (backward in time)
    lam = np.zeros((N, time_steps + 1))
    lam[:, -1] = 0
    lam[:, -2] = 0
    for n in range(time_steps - 2, -1, -1):
        lam_xx = np.zeros(N)
        lam_xx[1:-1] = (lam[2:, n+1] - 2 * lam[1:-1, n+1] + lam[:-2, n+1]) / dx**2
        lam[0, n] = 0
        lam[-1, n] = 0
        lam[:, n] = 2 * lam[:, n+1] - lam[:, n+2] + dt**2 * (
            lam_xx + np.cos(u[:, n+1]) * lam[:, n+1] + q * (u[:, n+1] - u_d[:, n+1]))

    # Calculate the gradient of J with respect to C
    grad_C = r * C + dt**2 * lam[:, :-1]

    # Update the control
    C = C - alpha * grad_C

# Define times to plot for the 2x2 grid
times_to_plot = [
    [0],                       # Plot A: Initial condition only
    [0, 100, 200],             # Plot B: Early and mid-time solutions
    [0, 100, 200, 300, 400, 500, 600, 700, 800],       # Plot C: Extended solutions
    [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]  # Plot D: Longer times
]

# Generate the 2x2 grid of subplots
fig, axes = plt.subplots(2, 2, figsize=(12, 10))  # Create a 2x2 grid
labels = ['Optimal control (A)', 'Optimal control (B)', 'Optimal conrol (C)', 'Optimal control (D)']  # Subplot labels

for i, times in enumerate(times_to_plot):
    ax = axes[i // 2, i % 2]  # Access subplot using grid indexing
    for t in times:
        if t < len(u[0]):  # Ensure time index is within bounds
            ax.plot(x, u[:, t], label=f"t={t * dt:.2f}")
    ax.set_title(f" {labels[i]}: ", fontsize=16)
    ax.set_xlabel("x", fontsize=18)
    ax.set_ylabel("u(x, t)", fontsize=18)
    ax.legend(fontsize=12)
    ax.tick_params(axis='x', labelsize=16)  # Correct function for x-axis tick size
    ax.tick_params(axis='y', labelsize=16)  # Correct function for y-axis tick size
    #ax.grid(True)

# Adjust layout and save the figure
plt.tight_layout()
plt.savefig(r'C:\Users\Ohemeng\Desktop\NewFolder-2\plots_2x2-2.pdf')
plt.show()
